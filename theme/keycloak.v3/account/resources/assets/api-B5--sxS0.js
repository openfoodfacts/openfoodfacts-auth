import{b2 as o,aY as a,b3 as l}from"./main-VxsXDFHF.js";function p(e){const s=e.headers.get("link");return s?s.split(/,\s*</).reduce((n,i)=>{const t=/<?([^>]*)>(.*)/.exec(i);if(!t)return{};const d=t[1],c=/\s*(.+)\s*=\s*"?([^"]+)"?/.exec(t[2]);if(c){const u={};for(const[f,m]of new URL(d).searchParams.entries())u[f]=m;n[c[2]]=u}return n},{}):{}}const k=async({signal:e,context:s},r,n=!1)=>{const i=await o(`/resources${n?"/shared-with-me?":"?"}`,s,{searchParams:n?r:void 0,signal:e}),t=p(i);return{data:h(await i.json()),links:t}},v=async({signal:e,context:s},r)=>{const n=await o(`/resources/${r}/permissions`,s,{signal:e});return l(n)},y=(e,s,r,n)=>o(`/resources/${s}/permissions`,e,{method:"PUT",body:[{username:r,scopes:n}]}),P=(e,s,r)=>o(`/resources/${s}/permissions`,e,{method:"PUT",body:r});function h(e){if(!e)throw new Error("Could not fetch");return e}async function b(e){const s=await o(a("/realms/",e.environment.realm,"/.well-known/openid-credential-issuer"),e,{},new URL(a(e.environment.serverBaseUrl,"/realms/",e.environment.realm,"/.well-known/openid-credential-issuer")));return l(s)}async function R(e,s,r){return(await o("/protocol/oid4vc/credential-offer-uri",e,{searchParams:{credential_configuration_id:s.id,type:"qr-code",width:"500",height:"500"}},new URL(a(r.credential_issuer+"/protocol/oid4vc/credential-offer-uri")))).blob()}export{y as a,k as b,v as f,b as g,R as r,P as u};
//# sourceMappingURL=api-B5--sxS0.js.map
