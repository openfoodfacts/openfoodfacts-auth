{"version":3,"file":"SigningIn-BwwaX4B9.js","sources":["../../../../../../../src/account-security/SigningIn.tsx"],"sourcesContent":["import {\n  Button,\n  DataList,\n  DataListAction,\n  DataListCell,\n  DataListItem,\n  DataListItemCells,\n  DataListItemRow,\n  Dropdown,\n  DropdownItem,\n  MenuToggle,\n  PageSection,\n  Spinner,\n  Split,\n  SplitItem,\n  Title,\n} from \"@patternfly/react-core\";\nimport {\n  EllipsisVIcon,\n  ExclamationTriangleIcon,\n  InfoAltIcon,\n} from \"@patternfly/react-icons\";\nimport { CSSProperties, useState } from \"react\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { useEnvironment } from \"@keycloak/keycloak-ui-shared\";\nimport { getCredentials } from \"../api/methods\";\nimport {\n  CredentialContainer,\n  CredentialMetadataRepresentation,\n} from \"../api/representations\";\nimport { EmptyRow } from \"../components/datalist/EmptyRow\";\nimport { Page } from \"../components/page/Page\";\nimport { TFuncKey } from \"../i18n\";\nimport { formatDate } from \"../utils/formatDate\";\nimport { usePromise } from \"../utils/usePromise\";\n\ntype MobileLinkProps = {\n  title: string;\n  onClick: () => void;\n  testid?: string;\n};\n\nconst MobileLink = ({ title, onClick, testid }: MobileLinkProps) => {\n  const [open, setOpen] = useState(false);\n  return (\n    <>\n      <Dropdown\n        popperProps={{\n          position: \"right\",\n        }}\n        onOpenChange={(isOpen) => setOpen(isOpen)}\n        toggle={(toggleRef) => (\n          <MenuToggle\n            className=\"pf-v5-u-display-none-on-lg\"\n            ref={toggleRef}\n            variant=\"plain\"\n            onClick={() => setOpen(!open)}\n            isExpanded={open}\n          >\n            <EllipsisVIcon />\n          </MenuToggle>\n        )}\n        isOpen={open}\n      >\n        <DropdownItem key=\"1\" onClick={onClick}>\n          {title}\n        </DropdownItem>\n      </Dropdown>\n      <Button\n        variant=\"link\"\n        onClick={onClick}\n        className=\"pf-v5-u-display-none pf-v5-u-display-inline-flex-on-lg\"\n        data-testid={testid}\n      >\n        {title}\n      </Button>\n    </>\n  );\n};\n\nexport const SigningIn = () => {\n  const { t } = useTranslation();\n  const context = useEnvironment();\n  const { login } = context.keycloak;\n\n  const [credentials, setCredentials] = useState<CredentialContainer[]>();\n\n  usePromise(\n    (signal) => getCredentials({ signal, context }),\n    setCredentials,\n    [],\n  );\n\n  const credentialRowCells = (\n    credMetadata: CredentialMetadataRepresentation,\n  ) => {\n    const credential = credMetadata.credential;\n    const maxWidth = {\n      \"--pf-v5-u-max-width--MaxWidth\": \"300px\",\n    } as CSSProperties;\n    const items = [\n      <DataListCell\n        key=\"title\"\n        data-testrole=\"label\"\n        className=\"pf-v5-u-max-width\"\n        style={maxWidth}\n      >\n        {t(credential.userLabel) || t(credential.type as TFuncKey)}\n      </DataListCell>,\n    ];\n\n    if (credential.createdDate) {\n      items.push(\n        <DataListCell\n          key={\"created\" + credential.id}\n          data-testrole=\"created-at\"\n        >\n          <Trans i18nKey=\"credentialCreatedAt\">\n            <strong className=\"pf-v5-u-mr-md\"></strong>\n            {{ date: formatDate(new Date(credential.createdDate)) }}\n          </Trans>\n        </DataListCell>,\n      );\n    }\n    if (\n      credMetadata.infoMessage ||\n      (credMetadata.warningMessageTitle &&\n        credMetadata.warningMessageDescription)\n    ) {\n      items.push(\n        <DataListCell\n          key={\"warning-message\" + credential.id}\n          data-testrole=\"warning-message\"\n        >\n          <>\n            {credMetadata.infoMessage && (\n              <p>\n                <InfoAltIcon />{\" \"}\n                {t(\n                  credMetadata.infoMessage.key,\n                  credMetadata.infoMessage.parameters?.reduce(\n                    (acc, val, idx) => ({ ...acc, [idx]: val }),\n                    {},\n                  ),\n                )}\n              </p>\n            )}\n            {credMetadata.warningMessageTitle &&\n              credMetadata.warningMessageDescription && (\n                <>\n                  <p>\n                    <ExclamationTriangleIcon />{\" \"}\n                    {t(\n                      credMetadata.warningMessageTitle.key,\n                      credMetadata.warningMessageTitle.parameters?.reduce(\n                        (acc, val, idx) => ({ ...acc, [idx]: val }),\n                        {},\n                      ),\n                    )}\n                  </p>\n                  <p>\n                    {t(\n                      credMetadata.warningMessageDescription.key,\n                      credMetadata.warningMessageDescription.parameters?.reduce(\n                        (acc, val, idx) => ({ ...acc, [idx]: val }),\n                        {},\n                      ),\n                    )}\n                  </p>\n                </>\n              )}\n          </>\n        </DataListCell>,\n      );\n    }\n    return items;\n  };\n\n  if (!credentials) {\n    return <Spinner />;\n  }\n\n  const credentialUniqueCategories = [\n    ...new Set(credentials.map((c) => c.category)),\n  ];\n\n  return (\n    <Page title={t(\"signingIn\")} description={t(\"signingInDescription\")}>\n      {credentialUniqueCategories.map((category) => (\n        <PageSection key={category} variant=\"light\" className=\"pf-v5-u-px-0\">\n          <Title headingLevel=\"h2\" size=\"xl\" id={`${category}-categ-title`}>\n            {t(category as TFuncKey)}\n          </Title>\n          {credentials\n            .filter((cred) => cred.category == category)\n            .map((container) => (\n              <>\n                <Split className=\"pf-v5-u-mt-lg pf-v5-u-mb-lg\">\n                  <SplitItem>\n                    <Title\n                      headingLevel=\"h3\"\n                      size=\"md\"\n                      className=\"pf-v5-u-mb-md\"\n                      data-testid={`${container.type}/help`}\n                    >\n                      <span\n                        className=\"cred-title pf-v5-u-display-block\"\n                        data-testid={`${container.type}/title`}\n                      >\n                        {t(container.displayName as TFuncKey)}\n                      </span>\n                    </Title>\n                    <span data-testid={`${container.type}/help-text`}>\n                      {t(container.helptext as TFuncKey)}\n                    </span>\n                  </SplitItem>\n                  {container.createAction && (\n                    <SplitItem isFilled>\n                      <div className=\"pf-v5-u-float-right\">\n                        <MobileLink\n                          onClick={() =>\n                            login({\n                              action: container.createAction,\n                            })\n                          }\n                          title={t(\"setUpNew\", {\n                            name: t(\n                              `${container.type}-display-name` as TFuncKey,\n                            ),\n                          })}\n                          testid={`${container.type}/create`}\n                        />\n                      </div>\n                    </SplitItem>\n                  )}\n                </Split>\n\n                <DataList\n                  aria-label=\"credential list\"\n                  className=\"pf-v5-u-mb-xl\"\n                  data-testid={`${container.type}/credential-list`}\n                >\n                  {container.userCredentialMetadatas.length === 0 && (\n                    <EmptyRow\n                      message={t(\"notSetUp\", {\n                        name: t(container.displayName as TFuncKey),\n                      })}\n                      data-testid={`${container.type}/not-set-up`}\n                    />\n                  )}\n\n                  {container.userCredentialMetadatas.map((meta) => (\n                    <DataListItem key={meta.credential.id}>\n                      <DataListItemRow id={`cred-${meta.credential.id}`}>\n                        <DataListItemCells\n                          className=\"pf-v5-u-py-0\"\n                          dataListCells={[\n                            ...credentialRowCells(meta),\n                            <DataListAction\n                              key=\"action\"\n                              id={`action-${meta.credential.id}`}\n                              aria-label={t(\"updateCredAriaLabel\")}\n                              aria-labelledby={`cred-${meta.credential.id}`}\n                            >\n                              {container.removeable && (\n                                <Button\n                                  variant=\"danger\"\n                                  data-testrole=\"remove\"\n                                  onClick={() => {\n                                    login({\n                                      action:\n                                        \"delete_credential:\" +\n                                        meta.credential.id,\n                                    });\n                                  }}\n                                >\n                                  {t(\"delete\")}\n                                </Button>\n                              )}\n                              {container.updateAction && (\n                                <Button\n                                  variant=\"secondary\"\n                                  onClick={() => {\n                                    login({ action: container.updateAction });\n                                  }}\n                                  data-testrole=\"update\"\n                                >\n                                  {t(\"update\")}\n                                </Button>\n                              )}\n                            </DataListAction>,\n                          ]}\n                        />\n                      </DataListItemRow>\n                    </DataListItem>\n                  ))}\n                </DataList>\n              </>\n            ))}\n        </PageSection>\n      ))}\n    </Page>\n  );\n};\n\nexport default SigningIn;\n"],"names":["MobileLink","title","onClick","testid","open","setOpen","useState","jsxs","Fragment","jsx","Dropdown","isOpen","toggleRef","MenuToggle","EllipsisVIcon","DropdownItem","Button","SigningIn","useTranslation","context","useEnvironment","login","credentials","setCredentials","usePromise","signal","getCredentials","credentialRowCells","credMetadata","credential","items","DataListCell","Trans","formatDate","InfoAltIcon","acc","val","idx","ExclamationTriangleIcon","Spinner","credentialUniqueCategories","c","Page","category","PageSection","Title","cred","container","Split","SplitItem","DataList","EmptyRow","meta","DataListItem","DataListItemRow","DataListItemCells","DataListAction"],"mappings":"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"}