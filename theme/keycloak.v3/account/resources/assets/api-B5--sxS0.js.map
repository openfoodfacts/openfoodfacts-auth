{"version":3,"file":"api-B5--sxS0.js","sources":["../../../../../../../src/api/parse-links.ts","../../../../../../../src/api.ts"],"sourcesContent":["export type Links = {\n  prev?: Record<string, string>;\n  next?: Record<string, string>;\n};\n\nexport function parseLinks(response: Response): Links {\n  const linkHeader = response.headers.get(\"link\");\n\n  if (!linkHeader) {\n    return {};\n  }\n\n  const links = linkHeader.split(/,\\s*</);\n  return links.reduce<Links>((acc: Links, link: string) => {\n    const matcher = /<?([^>]*)>(.*)/.exec(link);\n    if (!matcher) return {};\n    const linkUrl = matcher[1];\n    const rel = /\\s*(.+)\\s*=\\s*\"?([^\"]+)\"?/.exec(matcher[2]);\n    if (rel) {\n      const link: Record<string, string> = {};\n      for (const [key, value] of new URL(linkUrl).searchParams.entries()) {\n        link[key] = value;\n      }\n      acc[rel[2] as keyof Links] = link;\n    }\n    return acc;\n  }, {});\n}\n","import {\n  KeycloakContext,\n  type BaseEnvironment,\n} from \"@keycloak/keycloak-ui-shared\";\n\nimport { CallOptions } from \"./api/methods\";\nimport { Links, parseLinks } from \"./api/parse-links\";\nimport { parseResponse } from \"./api/parse-response\";\nimport {\n  CredentialsIssuer,\n  Permission,\n  Resource,\n  Scope,\n  SupportedCredentialConfiguration,\n} from \"./api/representations\";\nimport { request } from \"./api/request\";\nimport { joinPath } from \"./utils/joinPath\";\n\nexport const fetchResources = async (\n  { signal, context }: CallOptions,\n  requestParams: Record<string, string>,\n  shared: boolean | undefined = false,\n): Promise<{ data: Resource[]; links: Links }> => {\n  const response = await request(\n    `/resources${shared ? \"/shared-with-me?\" : \"?\"}`,\n    context,\n    { searchParams: shared ? requestParams : undefined, signal },\n  );\n\n  const links = parseLinks(response);\n\n  return {\n    data: checkResponse(await response.json()),\n    links,\n  };\n};\n\nexport const fetchPermission = async (\n  { signal, context }: CallOptions,\n  resourceId: string,\n): Promise<Permission[]> => {\n  const response = await request(\n    `/resources/${resourceId}/permissions`,\n    context,\n    { signal },\n  );\n  return parseResponse<Permission[]>(response);\n};\n\nexport const updateRequest = (\n  context: KeycloakContext<BaseEnvironment>,\n  resourceId: string,\n  username: string,\n  scopes: Scope[] | string[],\n) =>\n  request(`/resources/${resourceId}/permissions`, context, {\n    method: \"PUT\",\n    body: [{ username, scopes }],\n  });\n\nexport const updatePermissions = (\n  context: KeycloakContext<BaseEnvironment>,\n  resourceId: string,\n  permissions: Permission[],\n) =>\n  request(`/resources/${resourceId}/permissions`, context, {\n    method: \"PUT\",\n    body: permissions,\n  });\n\nfunction checkResponse<T>(response: T) {\n  if (!response) throw new Error(\"Could not fetch\");\n  return response;\n}\n\nexport async function getIssuer(context: KeycloakContext<BaseEnvironment>) {\n  const response = await request(\n    joinPath(\n      \"/realms/\",\n      context.environment.realm,\n      \"/.well-known/openid-credential-issuer\",\n    ),\n    context,\n    {},\n    new URL(\n      joinPath(\n        context.environment.serverBaseUrl,\n        \"/realms/\",\n        context.environment.realm,\n        \"/.well-known/openid-credential-issuer\",\n      ),\n    ),\n  );\n  return parseResponse<CredentialsIssuer>(response);\n}\n\nexport async function requestVCOffer(\n  context: KeycloakContext<BaseEnvironment>,\n  supportedCredentialConfiguration: SupportedCredentialConfiguration,\n  credentialsIssuer: CredentialsIssuer,\n) {\n  const response = await request(\n    \"/protocol/oid4vc/credential-offer-uri\",\n    context,\n    {\n      searchParams: {\n        credential_configuration_id: supportedCredentialConfiguration.id,\n        type: \"qr-code\",\n        width: \"500\",\n        height: \"500\",\n      },\n    },\n    new URL(\n      joinPath(\n        credentialsIssuer.credential_issuer +\n          \"/protocol/oid4vc/credential-offer-uri\",\n      ),\n    ),\n  );\n  return response.blob();\n}\n"],"names":["parseLinks","response","linkHeader","acc","link","matcher","linkUrl","rel","key","value","fetchResources","signal","context","requestParams","shared","request","links","checkResponse","fetchPermission","resourceId","parseResponse","updateRequest","username","scopes","updatePermissions","permissions","getIssuer","joinPath","requestVCOffer","supportedCredentialConfiguration","credentialsIssuer"],"mappings":"wDAKO,SAASA,EAAWC,EAA2B,CACpD,MAAMC,EAAaD,EAAS,QAAQ,IAAI,MAAM,EAE9C,OAAKC,EAISA,EAAW,MAAM,OAAO,EACzB,OAAc,CAACC,EAAYC,IAAiB,CACjD,MAAAC,EAAU,iBAAiB,KAAKD,CAAI,EACtC,GAAA,CAACC,EAAS,MAAO,GACf,MAAAC,EAAUD,EAAQ,CAAC,EACnBE,EAAM,4BAA4B,KAAKF,EAAQ,CAAC,CAAC,EACvD,GAAIE,EAAK,CACP,MAAMH,EAA+B,CAAA,EAC1B,SAAA,CAACI,EAAKC,CAAK,IAAK,IAAI,IAAIH,CAAO,EAAE,aAAa,UACvDF,EAAKI,CAAG,EAAIC,EAEVN,EAAAI,EAAI,CAAC,CAAgB,EAAIH,CAC/B,CACO,OAAAD,CACT,EAAG,CAAE,CAAA,EAjBI,EAkBX,CCTa,MAAAO,EAAiB,MAC5B,CAAE,OAAAC,EAAQ,QAAAC,CACV,EAAAC,EACAC,EAA8B,KACkB,CAChD,MAAMb,EAAW,MAAMc,EACrB,aAAaD,EAAS,mBAAqB,GAAG,GAC9CF,EACA,CAAE,aAAcE,EAASD,EAAgB,OAAW,OAAAF,CAAO,CAAA,EAGvDK,EAAQhB,EAAWC,CAAQ,EAE1B,MAAA,CACL,KAAMgB,EAAc,MAAMhB,EAAS,MAAM,EACzC,MAAAe,CAAA,CAEJ,EAEaE,EAAkB,MAC7B,CAAE,OAAAP,EAAQ,QAAAC,CAAA,EACVO,IAC0B,CAC1B,MAAMlB,EAAW,MAAMc,EACrB,cAAcI,CAAU,eACxBP,EACA,CAAE,OAAAD,CAAO,CAAA,EAEX,OAAOS,EAA4BnB,CAAQ,CAC7C,EAEaoB,EAAgB,CAC3BT,EACAO,EACAG,EACAC,IAEAR,EAAQ,cAAcI,CAAU,eAAgBP,EAAS,CACvD,OAAQ,MACR,KAAM,CAAC,CAAE,SAAAU,EAAU,OAAAC,EAAQ,CAC7B,CAAC,EAEUC,EAAoB,CAC/BZ,EACAO,EACAM,IAEAV,EAAQ,cAAcI,CAAU,eAAgBP,EAAS,CACvD,OAAQ,MACR,KAAMa,CACR,CAAC,EAEH,SAASR,EAAiBhB,EAAa,CACrC,GAAI,CAACA,EAAgB,MAAA,IAAI,MAAM,iBAAiB,EACzC,OAAAA,CACT,CAEA,eAAsByB,EAAUd,EAA2C,CACzE,MAAMX,EAAW,MAAMc,EACrBY,EACE,WACAf,EAAQ,YAAY,MACpB,uCACF,EACAA,EACA,CAAC,EACD,IAAI,IACFe,EACEf,EAAQ,YAAY,cACpB,WACAA,EAAQ,YAAY,MACpB,uCACF,CACF,CAAA,EAEF,OAAOQ,EAAiCnB,CAAQ,CAClD,CAEsB,eAAA2B,EACpBhB,EACAiB,EACAC,EACA,CAmBA,OAlBiB,MAAMf,EACrB,wCACAH,EACA,CACE,aAAc,CACZ,4BAA6BiB,EAAiC,GAC9D,KAAM,UACN,MAAO,MACP,OAAQ,KACV,CACF,EACA,IAAI,IACFF,EACEG,EAAkB,kBAChB,uCACJ,CACF,CAAA,GAEc,MAClB"}